
@mixin user-select($string: none) {
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: $string;
  -webkit-user-select: $string;
  -khtml-user-select: $string;
  -moz-user-select: $string;
  -ms-user-select: $string;
  user-select: $string;
}

@mixin ie($version: null) {
  @if $version == null {
    .ie & {
      @content;
    }
  } @else if $version == "old" {
    .ie8 &, .ie9 & {
      @content;
    }
  } @else {
    .ie#{$version} & {
      @content;
    }
  }
}

@mixin for($browser) {

  // http://browserhacks.com/#hack-f1070533535a12744a0381a75087a915
  @if $browser == "IE10+" {
    _:-ms-input-placeholder, :root & {
      @content;
    }
  }

  // http://browserhacks.com/#hack-d19e53a0fdfba5ec0f283ae86175a3af
  @else if $browser == "IE11" {
    _:-ms-fullscreen, :root & {
      @content;
    }
  }

  // http://browserhacks.com/#hack-fcd70847fc9af76ec582d13fe50066c8
  @else if $browser == "Firefox" {
    _:-moz-tree-row(hover), & {
      @content;
    }
  }

  @else {
    @content;
  }
}

/**
 * Enables separating out of IE speceific css.
 */
$fix-mqs: false !default;

@mixin respond-min($width) {
  @if $fix-mqs {
    @if $fix-mqs >= $width {
      @content;
    }
  } @else {
    @media screen and (min-width: $width) {
      @content;
    }
  }
}

@mixin respond-max($width) {
  @if $fix-mqs {
    @if $fix-mqs <= $width {
      @content;
    }
  } @else {
    @media screen and (max-width: $width) {
      @content;
    }
  }
}

$ie-ver: '' !default;

@mixin ie($ver) {
  @if $ver == $ie-ver {
    @content;
  }
}

// This mixin is a fork/enhancement of twitter bootstraps mixin
@mixin placeholder-enhanced($color: inherit, $fontStyle: inherit, $opacity:1) {
  /* Only the following properties are allowed/useful for placeholder text:
      color
      font-size
      font-style
      font-weight
      letter-spacing
      line-height
      padding
      text-align
      text-decoration
      opacity
  */
  &::-moz-placeholder {
    /* Firefox 19+ */
    color: $color;
    font-style: $fontStyle;
    opacity: $opacity; // Override Firefoxs unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
  }
  &:-ms-input-placeholder {
    color: $color;
    font-style: $fontStyle;
    opacity: $opacity;
  }
  &::-webkit-input-placeholder {
    color: $color;
    font-style: $fontStyle;
    opacity: $opacity;
  }
}

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

// Resize anything
@mixin resizable($direction) {
  resize: $direction; // Options: horizontal, vertical, both, none
  overflow: auto; // Safari fix
}

@mixin no-fade() {
  opacity: 1;
  cursor: default;
}

@mixin fade() {
  opacity: 0.5;
}

// h5bp.com/q
@mixin clearfix() {
  display: block;
  &:before,
  &:after {
    display: table;
    content: " ";
  }
  &:after {
    clear: both;
  }
}

@mixin ellipsis() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin grab-icon() {
  cursor: move;
  cursor: -moz-grab;
  cursor: -webkit-grab;
  .ie8 & {
    cursor: move;
  }
}

@mixin grabbing-icon() {
  cursor: move;
  cursor: -moz-grabbing;
  cursor: -webkit-grabbing;
  .ie8 & {
    cursor: move;
  }
}

@mixin scrollable($x: auto, $y: auto) {
  overflow-x: $x;
  overflow-y: $y;

  // This overrides the system scrollbar styling on webkit.
  // Why? Because OS X Lion and higher hides the scrollbars :(
  @if $x == auto or $x == scroll or $y == auto or $y == scroll {
    &::-webkit-scrollbar {
      width: 12px;
      height: 12px;
    }

    /* Track */
    &::-webkit-scrollbar-track {
      -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
      -webkit-border-radius: 10px;
    }

    /* Handle */
    &::-webkit-scrollbar-thumb {
      border: solid 1px #A6A6A6;
      background: rgba(233, 233, 233, 0.8);
      -webkit-border-radius: 10px;
      -webkit-box-shadow: 0 2px 1px 0 rgba(0, 0, 0, .05);
    }

    &::-webkit-scrollbar-thumb:window-inactive {
      background: rgba(233, 233, 233, 0.4);
    }
  }
}

@mixin svg($name, $width: $svg-icon-width, $height: $svg-icon-height) {
  width: $width;
  height: $height;
  background-image: url(inline-image('assets/images/svg/' + $name + '.svg'));
  background-repeat: no-repeat;
  background-size: contain;
}

// For adding font icons to elements using CSS pseudo-elements
// http://jaydenseric.com/blog/fun-with-sass-and-font-icons
@mixin aci($icon: false, $size: inherit, $position: before, $styles: true) {
    @if $position == both {
        $position: 'before, &:after';
    }
    // Either a :before or :after pseudo-element, or both, defaulting to :before
    &:#{$position} {
        @if $icon {
            // A particular icon has been specified
            content: "#{map-get($icons, $icon)}";
        }
        @if $styles {
            // Supportive icon styles required
            speak: none;
            font-style: normal;
            font-weight: normal;
            font-family: 'akamai-core-icons';
            font-size: $size;
            display: inline-block;
        }
        // Include any extra rules supplied for the pseudo-element
        @content;
    }
}