
@mixin user-select($string: none) {
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: $string;
      -webkit-user-select: $string;
       -khtml-user-select: $string;
         -moz-user-select: $string;
          -ms-user-select: $string;
              user-select: $string;
}


@mixin ie($version: null) {
    @if $version == null {
        .ie & {
            @content;
        }
    } @else if $version == "old" {
        .ie8 &, .ie9 & {
            @content;
        }
    } @else {
        .ie#{$version} & {
            @content;
        }
    }
}

@mixin for($browser) {
    
    // http://browserhacks.com/#hack-f1070533535a12744a0381a75087a915
    @if $browser == "IE10+" {
        _:-ms-input-placeholder, :root & {
            @content;
        }
    }
    
    // http://browserhacks.com/#hack-d19e53a0fdfba5ec0f283ae86175a3af
    @else if $browser == "IE11" {
        _:-ms-fullscreen, :root & {
            @content;
        }
    }
    
    @else {
        @content;
    }
}



/**
 * Enables separating out of IE speceific css.
 */
$fix-mqs: false !default;

@mixin respond-min($width) {
    @if $fix-mqs {
        @if $fix-mqs >= $width {
            @content;
        }
    }
    @else {
        @media screen and (min-width: $width) {
            @content;
        }
    }
}
@mixin respond-max($width) {
    @if $fix-mqs {
        @if $fix-mqs <= $width {
            @content;
        }
    }
    @else {
        @media screen and (max-width: $width) {
            @content;
        }
    }
}

$ie-ver: '' !default;

@mixin ie($ver) {
    @if $ver == $ie-ver {
        @content;
    }
}

// This mixin is a fork/enhancement of twitter bootstraps mixin
@mixin placeholder-enhanced($color: inherit, $fontStyle: inherit) {
    /* Only the following properties are allowed/useful for placeholder text:
    	color
    	font-size
    	font-style
    	font-weight
    	letter-spacing
    	line-height
    	padding
    	text-align
    	text-decoration
    */
	&::-moz-placeholder { /* Firefox 19+ */
		color: $color;
		font-style: $fontStyle;
		opacity: 1; // Override Firefoxs unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
	}
	&:-ms-input-placeholder {
		color: $color;
		font-style: $fontStyle;
	}
	&::-webkit-input-placeholder {
		color: $color;
		font-style: $fontStyle;
	}
}

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}


// Resize anything
@mixin resizable($direction) {
	resize: $direction; // Options: horizontal, vertical, both, none
	overflow: auto; // Safari fix
}

@mixin no-fade() {
	@include opacity(1);
	cursor: default;
}

@mixin fade() {
	@include opacity(0.5);
}

// h5bp.com/q
@mixin clearfix() {
	display: block;
	&:before,
	&:after {
		display: table;
		content: " ";
	}
	&:after {
		clear: both;
	}
}

@mixin ellipsis(){
	overflow: hidden;
	text-overflow: ellipsis;
}

@mixin list-type($type, $gutter: 2px) {
	@if $type == decimal or $type == disc {
		li {
			list-style: $type inside none;
		}
	}
	@else {
		li {
			list-style: none; // The icon is added as a background image so we can leverage sprites
			padding-left: luna-sprite-width($type) + (2 * $gutter);
			position: relative;
			&:before {
				$disable-magic-sprite-selectors: true;
				@include luna-sprite($type);
				content: "";
				position: absolute;
				left: $gutter;
			}
		}
	}
}

@mixin grab-icon(){
	cursor: move;
	cursor: -moz-grab;
	cursor: -webkit-grab;
	.ie8 & {
		cursor: move;
	}
}

@mixin grabbing-icon(){
	cursor: move;
	cursor: -moz-grabbing;
	cursor: -webkit-grabbing;
	.ie8 & {
		cursor: move;
	}
}

@mixin scrollable($x: auto, $y: auto) {
	overflow-x: $x;
	overflow-y: $y;

	// This overrides the system scrollbar styling on webkit.
	// Why? Because OS X Lion and higher hides the scrollbars :(
	@if $x == auto or $x == scroll or $y == auto or $y == scroll {
		&::-webkit-scrollbar {
			width: 12px;
			height: 12px;
		}

		/* Track */
		&::-webkit-scrollbar-track {
			-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
			-webkit-border-radius: 10px;
		}

		/* Handle */
		&::-webkit-scrollbar-thumb {
			border: solid 1px #A6A6A6;
			background: rgba(233,233,233,0.8);
			-webkit-border-radius: 10px;
			-webkit-box-shadow: 0 2px 1px 0 rgba(0, 0, 0, .05);
		}

		&::-webkit-scrollbar-thumb:window-inactive {
			background: rgba(233,233,233,0.4);
		}
	}
}

@mixin svg($name, $width: $svg-icon-width, $height: $svg-icon-height){
    width: $width;
    height: $height;
    background-image: inline-image('svg/' + $name + '.svg', 'image/svg+xml');
}



@mixin disable-magic-sprite-selectors($icon, $map: luna) {
    @if $map == luna {
        @include sprite($luna-sprites, $icon, $use-magic-selectors:false);
    }
    @else if $map == pulsar {
        @include sprite($pulsar-sprites, $icon, $use-magic-selectors:false);
    }
}



@mixin disable-magic-sprite-selector($icon, $selectors: $sprite-selectors, $map: luna) {
    
    @each $state in $selectors {
        @if $map == luna {
            &.luna-#{$icon}:#{$state} {
                background-position: sprite-position($luna-sprites, $icon);
            }
        }
        @else if $map == pulsar {
            &.pulsar-#{$icon}:#{$state} {
                background-position: sprite-position($pulsar-sprites, $icon);
            }
        }
    }
}


@mixin create-magic-sprite-selectors($map, $states: $sprite-selectors, $separator: $sprite-separator, $selectors-class: $magic-sprite-selectors-class) {

    // For each icon in a sprite map...
    @each $icon in sprite-names($map) {
        
        // For each sprite selector...
        @each $state in $states {
            
            // Is this a custom state?
            $customState: index($sprite-selectors, $state) == null;
            
            // Position of the state in the icon name
            $stateIndex: str-index($icon, $separator + $state);
            
            // If the state is in the icon name
            @if $stateIndex {
                
                // Discern the icon name without the state
                $iconName: str-slice($icon, 0, $stateIndex - 1);
                
                // Discern the state without the icon name
                $stateName: str-slice($icon, $stateIndex + 1);
                
                // @debug "Icon " + $icon + " (" + $iconName + "/" + $stateName + ") has state: " + $state;
                
                @if not $customState {
                    // Define the pseudo class
                    .#{$selectors-class}.#{sprite-map-name($map)}-#{$iconName}:#{$stateName} {
                        @include sprite($map, $icon);
                    }
                    
                    // Define the stateful class too, since disabling magic selectors disables stateful class name generation
                    .#{sprite-map-name($map)}-#{$iconName}_#{$stateName} {
                        @include sprite($map, $icon);
                    }
                } 
                @else {
                    // Custom state handling
                    @if $stateName == disabled {
                        // Define the disabled attr selector
                        .#{$selectors-class}.#{sprite-map-name($map)}-#{$iconName}[#{$stateName}] {
                            background-position: sprite-position($map, $icon) !important;
                        }
                    }
                }
            }
        }
    }
}